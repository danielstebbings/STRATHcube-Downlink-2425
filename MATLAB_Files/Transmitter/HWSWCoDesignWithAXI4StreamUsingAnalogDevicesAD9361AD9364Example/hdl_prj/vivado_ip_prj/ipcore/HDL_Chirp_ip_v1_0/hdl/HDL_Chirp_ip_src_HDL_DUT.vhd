-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/zynqRadioHWSWAXI4StreamAD9361AD9364SL/HDL_Chirp_ip_src_HDL_DUT.vhd
-- Created: 2025-01-14 13:38:16
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.60417e-07
-- Target subsystem base rate: 2.60417e-07
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.60417e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Tx_Valid_Out                  ce_out        2.60417e-07
-- Tx1_Data_I_Out                ce_out        2.60417e-07
-- Tx1_Data_Q_Out                ce_out        2.60417e-07
-- Rx_Valid_Out                  ce_out        2.60417e-07
-- Rx1_Data_I_Out                ce_out        2.60417e-07
-- Rx1_Data_Q_Out                ce_out        2.60417e-07
-- Rx2_Data_I_Out                ce_out        2.60417e-07
-- Rx2_Data_Q_Out                ce_out        2.60417e-07
-- AXI4S_Data_Out                ce_out        2.60417e-07
-- AXI4S_Valid_Out               ce_out        2.60417e-07
-- AXI4S_Tready_Out              ce_out        2.60417e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_Chirp_ip_src_HDL_DUT
-- Source Path: zynqRadioHWSWAXI4StreamAD9361AD9364SL/HDL_DUT
-- Hierarchy Level: 0
-- Model version: 10.0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_Chirp_ip_src_HDL_DUT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Tx_Valid_In                       :   IN    std_logic;
        Tx1_Data_I_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Tx1_Data_Q_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        AXI4S_Data_In                     :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        AXI4S_Valid_In                    :   IN    std_logic;
        AXI4S_Tready_In                   :   IN    std_logic;
        maxTxCount                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        txStart                           :   IN    std_logic;
        txSel                             :   IN    std_logic;
        Rx_Valid_In                       :   IN    std_logic;
        Rx1_Data_I_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Rx1_Data_Q_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Rx2_Data_I_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Rx2_Data_Q_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        ce_out                            :   OUT   std_logic;
        Tx_Valid_Out                      :   OUT   std_logic;
        Tx1_Data_I_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Tx1_Data_Q_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Rx_Valid_Out                      :   OUT   std_logic;
        Rx1_Data_I_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Rx1_Data_Q_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Rx2_Data_I_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Rx2_Data_Q_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        AXI4S_Data_Out                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI4S_Valid_Out                   :   OUT   std_logic;
        AXI4S_Tready_Out                  :   OUT   std_logic
        );
END HDL_Chirp_ip_src_HDL_DUT;


ARCHITECTURE rtl OF HDL_Chirp_ip_src_HDL_DUT IS

  -- Component Declarations
  COMPONENT HDL_Chirp_ip_src_Tx
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4S_Data_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          AXI4S_Valid_In                  :   IN    std_logic;
          MaxTxCount                      :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          txStart                         :   IN    std_logic;
          txSEL                           :   IN    std_logic;
          Tx_Tready_Out                   :   OUT   std_logic;
          Tx_Valid_Out                    :   OUT   std_logic;
          Tx_Data_Out                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
          );
  END COMPONENT;

  COMPONENT HDL_Chirp_ip_src_Rx
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Tx_Valid_In                     :   IN    std_logic;
          Tx_Data_In                      :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          Rx_Data_In_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          Rx_Data_In_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          Valid_Out                       :   OUT   std_logic;
          Tx_Data_P                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          Rx_Data_P                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : HDL_Chirp_ip_src_Tx
    USE ENTITY work.HDL_Chirp_ip_src_Tx(rtl);

  FOR ALL : HDL_Chirp_ip_src_Rx
    USE ENTITY work.HDL_Chirp_ip_src_Rx(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL AXI4S_Data_In_signed             : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay5_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Cast_out1                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL maxTxCount_signed                : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay8_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Tx_out1                          : std_logic;
  SIGNAL Tx_out2                          : std_logic;
  SIGNAL Tx_out3                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Tx_out3_signed                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Bit_Shift1_out1                  : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Constant2_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Constant3_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Rx1_Data_I_In_signed             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay11_out1                     : signed(15 DOWNTO 0);  -- int16
  SIGNAL Rx1_Data_Q_In_signed             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay12_out1                     : signed(15 DOWNTO 0);  -- int16
  SIGNAL Rx_out1                          : std_logic;
  SIGNAL Rx_out2                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx_out3                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx_out2_signed                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Rx_out3_signed                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Bit_Concat_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay18_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  u_Tx : HDL_Chirp_ip_src_Tx
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              AXI4S_Data_In => std_logic_vector(Cast_out1),  -- int16
              AXI4S_Valid_In => Delay6_out1,
              MaxTxCount => std_logic_vector(Delay8_out1),  -- int16
              txStart => Delay7_out1,
              txSEL => Delay1_out1,
              Tx_Tready_Out => Tx_out1,
              Tx_Valid_Out => Tx_out2,
              Tx_Data_Out => Tx_out3  -- int16
              );

  u_Rx : HDL_Chirp_ip_src_Rx
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Tx_Valid_In => Tx_out2,
              Tx_Data_In => Tx_out3,  -- int16
              Rx_Data_In_re => std_logic_vector(Delay11_out1),  -- int16
              Rx_Data_In_im => std_logic_vector(Delay12_out1),  -- int16
              Valid_Out => Rx_out1,
              Tx_Data_P => Rx_out2,  -- int16
              Rx_Data_P => Rx_out3  -- int16
              );

  Constant1_out1 <= '1';

  AXI4S_Data_In_signed <= signed(AXI4S_Data_In);

  enb <= clk_enable;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= AXI4S_Data_In_signed;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Cast_out1 <= Delay5_out1(15 DOWNTO 0);

  maxTxCount_signed <= signed(maxTxCount);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1 <= AXI4S_Valid_In;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_out1 <= maxTxCount_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_out1 <= txStart;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= txSel;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Tx_out3_signed <= signed(Tx_out3);

  -- Shift left to prepare for 16-bit to 12-bit MSB interface at DAC
  Bit_Shift1_out1 <= Tx_out3_signed sll 4;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= Bit_Shift1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Tx1_Data_I_Out <= std_logic_vector(Delay3_out1);

  Constant2_out1 <= to_signed(16#0000#, 16);

  Tx1_Data_Q_Out <= std_logic_vector(Constant2_out1);

  Constant_out1 <= '0';

  Constant3_out1 <= to_signed(16#0000#, 16);

  Rx1_Data_I_Out <= std_logic_vector(Constant3_out1);

  Rx1_Data_Q_Out <= std_logic_vector(Constant3_out1);

  Rx2_Data_I_Out <= std_logic_vector(Constant3_out1);

  Rx2_Data_Q_Out <= std_logic_vector(Constant3_out1);

  Rx1_Data_I_In_signed <= signed(Rx1_Data_I_In);

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1 <= Rx1_Data_I_In_signed;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Rx1_Data_Q_In_signed <= signed(Rx1_Data_Q_In);

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_out1 <= Rx1_Data_Q_In_signed;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Rx_out2_signed <= signed(Rx_out2);

  Rx_out3_signed <= signed(Rx_out3);

  Bit_Concat_out1 <= unsigned(Rx_out2_signed) & unsigned(Rx_out3_signed);

  Delay18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay18_out1 <= Bit_Concat_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  AXI4S_Data_Out <= std_logic_vector(Delay18_out1);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Rx_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  ce_out <= clk_enable;

  Tx_Valid_Out <= Constant1_out1;

  Rx_Valid_Out <= Constant_out1;

  AXI4S_Valid_Out <= Delay2_out1;

  AXI4S_Tready_Out <= Tx_out1;








END rtl;

