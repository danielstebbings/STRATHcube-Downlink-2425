-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/zynqRadioHWSWAXI4StreamAD9361AD9364SL/HDL_Chirp_ip_src_Rx.vhd
-- Created: 2025-01-14 13:38:16
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_Chirp_ip_src_Rx
-- Source Path: zynqRadioHWSWAXI4StreamAD9361AD9364SL/HDL_DUT/Rx
-- Hierarchy Level: 1
-- Model version: 10.0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_Chirp_ip_src_Rx IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Tx_Valid_In                       :   IN    std_logic;
        Tx_Data_In                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Rx_Data_In_re                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Rx_Data_In_im                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Valid_Out                         :   OUT   std_logic;
        Tx_Data_P                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Rx_Data_P                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
        );
END HDL_Chirp_ip_src_Rx;


ARCHITECTURE rtl OF HDL_Chirp_ip_src_Rx IS

  -- Component Declarations
  COMPONENT HDL_Chirp_ip_src_Detect_Increase
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HDL_Chirp_ip_src_SR_Latch
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          R                               :   IN    std_logic;
          S                               :   IN    std_logic;
          Q                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : HDL_Chirp_ip_src_Detect_Increase
    USE ENTITY work.HDL_Chirp_ip_src_Detect_Increase(rtl);

  FOR ALL : HDL_Chirp_ip_src_SR_Latch
    USE ENTITY work.HDL_Chirp_ip_src_SR_Latch(rtl);

  -- Signals
  SIGNAL count_step                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_reset                      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Detect_Increase_out1             : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count                            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL SR_Latch_out1                    : std_logic;
  SIGNAL count_1                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL count_2                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Tx_Data_In_signed                : signed(15 DOWNTO 0);  -- int16
  SIGNAL Complex_to_Real_Imag2_out1       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Complex_to_Real_Imag2_out2       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay7_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product3_out1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay8_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Add1_out1                        : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Delay9_out1                      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Shift_Arithmetic1_out1           : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Data_Type_Conversion1_out1       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Rx_Data_In_re_signed             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Rx_Data_In_im_signed             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Add_out1                         : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Delay2_out1                      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Shift_Arithmetic_out1            : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Data_Type_Conversion_out1        : signed(15 DOWNTO 0);  -- int16

BEGIN
  -- Compute power of transmitted signal
  -- Compute power of received signal
  -- Generate new Valid signal

  u_Detect_Increase : HDL_Chirp_ip_src_Detect_Increase
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => Tx_Valid_In,
              Y => Detect_Increase_out1
              );

  u_SR_Latch : HDL_Chirp_ip_src_SR_Latch
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              R => Compare_To_Constant_out1,
              S => Detect_Increase_out1,
              Q => SR_Latch_out1
              );

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#001#, 12);

  count_reset <= to_unsigned(16#000#, 12);

  count <= HDL_Counter_out1 + count_step;

  
  count_1 <= HDL_Counter_out1 WHEN SR_Latch_out1 = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN Compare_To_Constant_out1 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter_out1 >= to_unsigned(16#BFF#, 12) ELSE
      '0';

  Tx_Data_In_signed <= signed(Tx_Data_In);

  Complex_to_Real_Imag2_out1 <= Tx_Data_In_signed;
  Complex_to_Real_Imag2_out2 <= to_signed(16#0000#, 16);

  Product2_out1 <= Complex_to_Real_Imag2_out1 * Complex_to_Real_Imag2_out1;

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_out1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Product3_out1 <= Complex_to_Real_Imag2_out2 * Complex_to_Real_Imag2_out2;

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_out1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Add1_out1 <= resize(Delay7_out1, 33) + resize(Delay8_out1, 33);

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_out1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Shift_Arithmetic1_out1 <= SHIFT_RIGHT(Delay9_out1, 10);

  Data_Type_Conversion1_out1 <= Shift_Arithmetic1_out1(15 DOWNTO 0);

  Tx_Data_P <= std_logic_vector(Data_Type_Conversion1_out1);

  Rx_Data_In_re_signed <= signed(Rx_Data_In_re);

  Product_out1 <= Rx_Data_In_re_signed * Rx_Data_In_re_signed;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Rx_Data_In_im_signed <= signed(Rx_Data_In_im);

  Product1_out1 <= Rx_Data_In_im_signed * Rx_Data_In_im_signed;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Add_out1 <= resize(Delay_out1, 33) + resize(Delay1_out1, 33);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Shift_Arithmetic_out1 <= SHIFT_RIGHT(Delay2_out1, 10);

  Data_Type_Conversion_out1 <= Shift_Arithmetic_out1(15 DOWNTO 0);

  Rx_Data_P <= std_logic_vector(Data_Type_Conversion_out1);

  Valid_Out <= SR_Latch_out1;

END rtl;

