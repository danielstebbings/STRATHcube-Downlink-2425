-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/zynqRadioHWSWAXI4StreamAD9361AD9364SL/HDL_Chirp_ip_dut.vhd
-- Created: 2025-01-14 13:38:25
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_Chirp_ip_dut
-- Source Path: HDL_Chirp_ip/HDL_Chirp_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_Chirp_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        Tx_Valid_In                       :   IN    std_logic;  -- ufix1
        Tx1_Data_I_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        Tx1_Data_Q_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        AXI4S_Data_In                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        AXI4S_Valid_In                    :   IN    std_logic;  -- ufix1
        AXI4S_Tready_In                   :   IN    std_logic;  -- ufix1
        maxTxCount                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        txStart                           :   IN    std_logic;  -- ufix1
        txSel                             :   IN    std_logic;  -- ufix1
        Rx_Valid_In                       :   IN    std_logic;  -- ufix1
        Rx1_Data_I_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        Rx1_Data_Q_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        Rx2_Data_I_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        Rx2_Data_Q_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        ce_out                            :   OUT   std_logic;  -- ufix1
        Tx_Valid_Out                      :   OUT   std_logic;  -- ufix1
        Tx1_Data_I_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        Tx1_Data_Q_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        Rx_Valid_Out                      :   OUT   std_logic;  -- ufix1
        Rx1_Data_I_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        Rx1_Data_Q_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        Rx2_Data_I_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        Rx2_Data_Q_Out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        AXI4S_Data_Out                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4S_Valid_Out                   :   OUT   std_logic;  -- ufix1
        AXI4S_Tready_Out                  :   OUT   std_logic  -- ufix1
        );
END HDL_Chirp_ip_dut;


ARCHITECTURE rtl OF HDL_Chirp_ip_dut IS

  -- Component Declarations
  COMPONENT HDL_Chirp_ip_src_HDL_DUT
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          Tx_Valid_In                     :   IN    std_logic;  -- ufix1
          Tx1_Data_I_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          Tx1_Data_Q_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          AXI4S_Data_In                   :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          AXI4S_Valid_In                  :   IN    std_logic;  -- ufix1
          AXI4S_Tready_In                 :   IN    std_logic;  -- ufix1
          maxTxCount                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          txStart                         :   IN    std_logic;  -- ufix1
          txSel                           :   IN    std_logic;  -- ufix1
          Rx_Valid_In                     :   IN    std_logic;  -- ufix1
          Rx1_Data_I_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx1_Data_Q_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx2_Data_I_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx2_Data_Q_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          ce_out                          :   OUT   std_logic;  -- ufix1
          Tx_Valid_Out                    :   OUT   std_logic;  -- ufix1
          Tx1_Data_I_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Tx1_Data_Q_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx_Valid_Out                    :   OUT   std_logic;  -- ufix1
          Rx1_Data_I_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx1_Data_Q_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx2_Data_I_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx2_Data_Q_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          AXI4S_Data_Out                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4S_Valid_Out                 :   OUT   std_logic;  -- ufix1
          AXI4S_Tready_Out                :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : HDL_Chirp_ip_src_HDL_DUT
    USE ENTITY work.HDL_Chirp_ip_src_HDL_DUT(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Tx_Valid_In_sig                  : std_logic;  -- ufix1
  SIGNAL AXI4S_Valid_In_sig               : std_logic;  -- ufix1
  SIGNAL AXI4S_Tready_In_sig              : std_logic;  -- ufix1
  SIGNAL txStart_sig                      : std_logic;  -- ufix1
  SIGNAL txSel_sig                        : std_logic;  -- ufix1
  SIGNAL Rx_Valid_In_sig                  : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL Tx_Valid_Out_sig                 : std_logic;  -- ufix1
  SIGNAL Tx1_Data_I_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Tx1_Data_Q_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx_Valid_Out_sig                 : std_logic;  -- ufix1
  SIGNAL Rx1_Data_I_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx1_Data_Q_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx2_Data_I_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx2_Data_Q_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL AXI4S_Data_Out_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4S_Valid_Out_sig              : std_logic;  -- ufix1
  SIGNAL AXI4S_Tready_Out_sig             : std_logic;  -- ufix1

BEGIN
  u_HDL_Chirp_ip_src_HDL_DUT : HDL_Chirp_ip_src_HDL_DUT
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              Tx_Valid_In => Tx_Valid_In_sig,  -- ufix1
              Tx1_Data_I_In => Tx1_Data_I_In,  -- sfix16
              Tx1_Data_Q_In => Tx1_Data_Q_In,  -- sfix16
              AXI4S_Data_In => AXI4S_Data_In,  -- sfix32
              AXI4S_Valid_In => AXI4S_Valid_In_sig,  -- ufix1
              AXI4S_Tready_In => AXI4S_Tready_In_sig,  -- ufix1
              maxTxCount => maxTxCount,  -- sfix16
              txStart => txStart_sig,  -- ufix1
              txSel => txSel_sig,  -- ufix1
              Rx_Valid_In => Rx_Valid_In_sig,  -- ufix1
              Rx1_Data_I_In => Rx1_Data_I_In,  -- sfix16
              Rx1_Data_Q_In => Rx1_Data_Q_In,  -- sfix16
              Rx2_Data_I_In => Rx2_Data_I_In,  -- sfix16
              Rx2_Data_Q_In => Rx2_Data_Q_In,  -- sfix16
              ce_out => ce_out_sig,  -- ufix1
              Tx_Valid_Out => Tx_Valid_Out_sig,  -- ufix1
              Tx1_Data_I_Out => Tx1_Data_I_Out_sig,  -- sfix16
              Tx1_Data_Q_Out => Tx1_Data_Q_Out_sig,  -- sfix16
              Rx_Valid_Out => Rx_Valid_Out_sig,  -- ufix1
              Rx1_Data_I_Out => Rx1_Data_I_Out_sig,  -- sfix16
              Rx1_Data_Q_Out => Rx1_Data_Q_Out_sig,  -- sfix16
              Rx2_Data_I_Out => Rx2_Data_I_Out_sig,  -- sfix16
              Rx2_Data_Q_Out => Rx2_Data_Q_Out_sig,  -- sfix16
              AXI4S_Data_Out => AXI4S_Data_Out_sig,  -- ufix32
              AXI4S_Valid_Out => AXI4S_Valid_Out_sig,  -- ufix1
              AXI4S_Tready_Out => AXI4S_Tready_Out_sig  -- ufix1
              );

  Tx_Valid_In_sig <= Tx_Valid_In;

  AXI4S_Valid_In_sig <= AXI4S_Valid_In;

  AXI4S_Tready_In_sig <= AXI4S_Tready_In;

  txStart_sig <= txStart;

  txSel_sig <= txSel;

  Rx_Valid_In_sig <= Rx_Valid_In;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  Tx_Valid_Out <= Tx_Valid_Out_sig;

  Tx1_Data_I_Out <= Tx1_Data_I_Out_sig;

  Tx1_Data_Q_Out <= Tx1_Data_Q_Out_sig;

  Rx_Valid_Out <= Rx_Valid_Out_sig;

  Rx1_Data_I_Out <= Rx1_Data_I_Out_sig;

  Rx1_Data_Q_Out <= Rx1_Data_Q_Out_sig;

  Rx2_Data_I_Out <= Rx2_Data_I_Out_sig;

  Rx2_Data_Q_Out <= Rx2_Data_Q_Out_sig;

  AXI4S_Data_Out <= AXI4S_Data_Out_sig;

  AXI4S_Valid_Out <= AXI4S_Valid_Out_sig;

  AXI4S_Tready_Out <= AXI4S_Tready_Out_sig;

END rtl;

