-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/zynqRadioHWSWAXI4StreamAD9361AD9364SL/HDL_Chirp_ip_addr_decoder.vhd
-- Created: 2025-01-14 13:38:25
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_Chirp_ip_addr_decoder
-- Source Path: HDL_Chirp_ip/HDL_Chirp_ip_axi_lite/HDL_Chirp_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_Chirp_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_write                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        addr_read                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_packet_size_axi4_stream_write_master :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_maxTxCount                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        write_txStart                     :   OUT   std_logic;  -- ufix1
        write_txSel                       :   OUT   std_logic  -- ufix1
        );
END HDL_Chirp_ip_addr_decoder;


ARCHITECTURE rtl OF HDL_Chirp_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_read_unsigned               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL address_select_level1            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mux_out0_level1                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL addr_write_unsigned              : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_packet_size_axi4_stream_write_master_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_packet_size_axi4_stream_write_master_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_packet_size_axi4_stream_write_master_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_maxTxCount_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_maxTxCount_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_maxTxCount               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_maxTxCount_1_1          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_txStart_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_txStart_1_1              : std_logic;  -- ufix1
  SIGNAL data_in_txStart                  : std_logic;  -- ufix1
  SIGNAL data_reg_txStart_1_1             : std_logic;  -- ufix1
  SIGNAL decode_sel_txSel_1_1             : std_logic;  -- ufix1
  SIGNAL reg_enb_txSel_1_1                : std_logic;  -- ufix1
  SIGNAL data_in_txSel                    : std_logic;  -- ufix1
  SIGNAL data_reg_txSel_1_1               : std_logic;  -- ufix1

BEGIN
  addr_read_unsigned <= unsigned(addr_read);

  address_select_level1 <= addr_read_unsigned(1 DOWNTO 0);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  reg_ip_timestamp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_ip_timestamp <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  const_0 <= to_unsigned(0, 32);

  
  mux_out0_level1 <= read_reg_ip_timestamp WHEN address_select_level1 = to_unsigned(16#3#, 2) ELSE
      const_0;

  data_read <= std_logic_vector(mux_out0_level1);

  addr_write_unsigned <= unsigned(addr_write);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_axi_enable_1_1 <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  
  decode_sel_packet_size_axi4_stream_write_master_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  reg_enb_packet_size_axi4_stream_write_master_1_1 <= decode_sel_packet_size_axi4_stream_write_master_1_1 AND wr_enb;

  reg_packet_size_axi4_stream_write_master_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_packet_size_axi4_stream_write_master_1_1 <= to_unsigned(1024, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_packet_size_axi4_stream_write_master_1_1 = '1' THEN
        data_reg_packet_size_axi4_stream_write_master_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_packet_size_axi4_stream_write_master_1_1_process;


  write_packet_size_axi4_stream_write_master <= std_logic_vector(data_reg_packet_size_axi4_stream_write_master_1_1);

  
  decode_sel_maxTxCount_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_maxTxCount_1_1 <= decode_sel_maxTxCount_1_1 AND wr_enb;

  data_in_maxTxCount <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_maxTxCount_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_maxTxCount_1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_maxTxCount_1_1 = '1' THEN
        data_reg_maxTxCount_1_1 <= data_in_maxTxCount;
      END IF;
    END IF;
  END PROCESS reg_maxTxCount_1_1_process;


  write_maxTxCount <= std_logic_vector(data_reg_maxTxCount_1_1);

  
  decode_sel_txStart_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_txStart_1_1 <= decode_sel_txStart_1_1 AND wr_enb;

  data_in_txStart <= data_write_unsigned(0);

  reg_txStart_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_txStart_1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_txStart_1_1 = '1' THEN
        data_reg_txStart_1_1 <= data_in_txStart;
      END IF;
    END IF;
  END PROCESS reg_txStart_1_1_process;


  
  decode_sel_txSel_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_txSel_1_1 <= decode_sel_txSel_1_1 AND wr_enb;

  data_in_txSel <= data_write_unsigned(0);

  reg_txSel_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_txSel_1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_txSel_1_1 = '1' THEN
        data_reg_txSel_1_1 <= data_in_txSel;
      END IF;
    END IF;
  END PROCESS reg_txSel_1_1_process;


  write_axi_enable <= data_reg_axi_enable_1_1;

  write_txStart <= data_reg_txStart_1_1;

  write_txSel <= data_reg_txSel_1_1;

END rtl;

