-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/zynqRadioHWSWAXI4StreamAD9361AD9364SL/HDL_Chirp_ip_src_Tx.vhd
-- Created: 2025-01-14 13:38:16
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_Chirp_ip_src_Tx
-- Source Path: zynqRadioHWSWAXI4StreamAD9361AD9364SL/HDL_DUT/Tx
-- Hierarchy Level: 1
-- Model version: 10.0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_Chirp_ip_src_Tx IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        AXI4S_Data_In                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        AXI4S_Valid_In                    :   IN    std_logic;
        MaxTxCount                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        txStart                           :   IN    std_logic;
        txSEL                             :   IN    std_logic;
        Tx_Tready_Out                     :   OUT   std_logic;
        Tx_Valid_Out                      :   OUT   std_logic;
        Tx_Data_Out                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
        );
END HDL_Chirp_ip_src_Tx;


ARCHITECTURE rtl OF HDL_Chirp_ip_src_Tx IS

  -- Component Declarations
  COMPONENT HDL_Chirp_ip_src_Detect_Increase_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HDL_Chirp_ip_src_SR_Latch_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          R                               :   IN    std_logic;
          S                               :   IN    std_logic;
          Q                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HDL_Chirp_ip_src_Detect_Change
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HDL_Chirp_ip_src_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : HDL_Chirp_ip_src_Detect_Increase_block
    USE ENTITY work.HDL_Chirp_ip_src_Detect_Increase_block(rtl);

  FOR ALL : HDL_Chirp_ip_src_SR_Latch_block
    USE ENTITY work.HDL_Chirp_ip_src_SR_Latch_block(rtl);

  FOR ALL : HDL_Chirp_ip_src_Detect_Change
    USE ENTITY work.HDL_Chirp_ip_src_Detect_Change(rtl);

  FOR ALL : HDL_Chirp_ip_src_SimpleDualPortRAM_generic
    USE ENTITY work.HDL_Chirp_ip_src_SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL count_step                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_reset                      : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL MaxTxCount_signed                : signed(15 DOWNTO 0);  -- int16
  SIGNAL Detect_Increase_out1             : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SR_Latch_out1                    : std_logic;
  SIGNAL count_1                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL count_2                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Relational_Operator_cast         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL OR1_out1                         : std_logic;
  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay_out1                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay_out1_dtc                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL AXI4S_Data_In_signed             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Detect_Change_out1               : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL count_step_1                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_reset_1                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL HDL_Counter1_out1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_3                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_4                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_5                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Simple_Dual_Port_RAM_out1        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Simple_Dual_Port_RAM_out1_signed : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Multiport_Switch_out1            : signed(15 DOWNTO 0);  -- int16
  SIGNAL Multiport_Switch1_out1           : signed(15 DOWNTO 0);  -- int16

BEGIN
  -- Tx RAM controller
  -- Tx trigger 

  u_Detect_Increase : HDL_Chirp_ip_src_Detect_Increase_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => txStart,
              Y => Detect_Increase_out1
              );

  u_SR_Latch : HDL_Chirp_ip_src_SR_Latch_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              R => Relational_Operator_out1,
              S => Detect_Increase_out1,
              Q => SR_Latch_out1
              );

  -- Reset counter before and after loading new data
  u_Detect_Change : HDL_Chirp_ip_src_Detect_Change
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => AXI4S_Valid_In,
              Y => Detect_Change_out1
              );

  u_Simple_Dual_Port_RAM : HDL_Chirp_ip_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 11,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(Delay4_out1),
              wr_addr => std_logic_vector(HDL_Counter1_out1),
              wr_en => Delay3_out1,
              rd_addr => std_logic_vector(HDL_Counter_out1),
              dout => Simple_Dual_Port_RAM_out1
              );

  -- Don't apply backpressure to the RF Front End
  Constant1_out1 <= '1';

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#001#, 11);

  count_reset <= to_unsigned(16#000#, 11);

  MaxTxCount_signed <= signed(MaxTxCount);

  count <= HDL_Counter_out1 + count_step;

  
  count_1 <= HDL_Counter_out1 WHEN SR_Latch_out1 = '0' ELSE
      count;

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= Relational_Operator_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  
  count_2 <= count_1 WHEN Unit_Delay_out1 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Relational_Operator_cast <= signed(resize(HDL_Counter_out1, 16));
  
  Relational_Operator_out1 <= '1' WHEN Relational_Operator_cast >= MaxTxCount_signed ELSE
      '0';

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= SR_Latch_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  OR1_out1 <= SR_Latch_out1 OR Delay2_out1;

  Constant_out1 <= to_signed(16#0000#, 16);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay_out1_dtc <= signed(resize(Delay_out1, 16));

  AXI4S_Data_In_signed <= signed(AXI4S_Data_In);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= AXI4S_Data_In_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= AXI4S_Valid_In;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step_1 <= to_unsigned(16#001#, 11);

  count_reset_1 <= to_unsigned(16#000#, 11);

  count_3 <= HDL_Counter1_out1 + count_step_1;

  
  count_4 <= HDL_Counter1_out1 WHEN Delay3_out1 = '0' ELSE
      count_3;

  
  count_5 <= count_4 WHEN Detect_Change_out1 = '0' ELSE
      count_reset_1;

  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter1_out1 <= count_5;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  Simple_Dual_Port_RAM_out1_signed <= signed(Simple_Dual_Port_RAM_out1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Simple_Dual_Port_RAM_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  -- Select to transmit ramp or data stored in RAM
  
  Multiport_Switch_out1 <= Delay_out1_dtc WHEN txSEL = '0' ELSE
      Delay1_out1;

  
  Multiport_Switch1_out1 <= Constant_out1 WHEN OR1_out1 = '0' ELSE
      Multiport_Switch_out1;

  Tx_Data_Out <= std_logic_vector(Multiport_Switch1_out1);

  Tx_Tready_Out <= Constant1_out1;

  Tx_Valid_Out <= OR1_out1;

END rtl;

