-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/zynqRadioHWSWAXI4StreamAD9361AD9364SL/HDL_Chirp_ip.vhd
-- Created: 2025-01-14 13:38:25
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_Chirp_ip
-- Source Path: HDL_Chirp_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_Chirp_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        baseband_rx0I_in                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        baseband_rx0Q_in                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        baseband_rx1I_in                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        baseband_rx1Q_in                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        baseband_rx_valid_in              :   IN    std_logic;  -- ufix1
        dma_tx0I_in                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        dma_tx0Q_in                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        dma_tx_valid_in                   :   IN    std_logic;  -- ufix1
        AXI4_Stream_Write_Master_TREADY   :   IN    std_logic;  -- ufix1
        AXI4_Stream_Read_Slave_TDATA      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Stream_Read_Slave_TVALID     :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        dma_rx0I_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        dma_rx0Q_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        dma_rx1I_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        dma_rx1Q_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        dma_rx_valid_out                  :   OUT   std_logic;  -- ufix1
        baseband_tx0I_out                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        baseband_tx0Q_out                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        baseband_tx_valid_out             :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Write_Master_TDATA    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Stream_Write_Master_TVALID   :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Write_Master_TLAST    :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Read_Slave_TREADY     :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END HDL_Chirp_ip;


ARCHITECTURE rtl OF HDL_Chirp_ip IS

  -- Component Declarations
  COMPONENT HDL_Chirp_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HDL_Chirp_ip_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_packet_size_axi4_stream_write_master :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_maxTxCount                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          write_txStart                   :   OUT   std_logic;  -- ufix1
          write_txSel                     :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT HDL_Chirp_ip_axi4_stream_write_master
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Write_Master_TREADY :   IN    std_logic;  -- ufix1
          user_data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          user_valid                      :   IN    std_logic;  -- ufix1
          write_packet_size_axi4_stream_write_master :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_Write_Master_TDATA  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_Write_Master_TVALID :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Write_Master_TLAST  :   OUT   std_logic;  -- ufix1
          user_ready                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT HDL_Chirp_ip_axi4_stream_read_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Read_Slave_TDATA    :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_Read_Slave_TVALID   :   IN    std_logic;  -- ufix1
          user_ready                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_Read_Slave_TREADY   :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          user_valid                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT HDL_Chirp_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          Tx_Valid_In                     :   IN    std_logic;  -- ufix1
          Tx1_Data_I_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          Tx1_Data_Q_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          AXI4S_Data_In                   :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          AXI4S_Valid_In                  :   IN    std_logic;  -- ufix1
          AXI4S_Tready_In                 :   IN    std_logic;  -- ufix1
          maxTxCount                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          txStart                         :   IN    std_logic;  -- ufix1
          txSel                           :   IN    std_logic;  -- ufix1
          Rx_Valid_In                     :   IN    std_logic;  -- ufix1
          Rx1_Data_I_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx1_Data_Q_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx2_Data_I_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx2_Data_Q_In                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          ce_out                          :   OUT   std_logic;  -- ufix1
          Tx_Valid_Out                    :   OUT   std_logic;  -- ufix1
          Tx1_Data_I_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Tx1_Data_Q_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx_Valid_Out                    :   OUT   std_logic;  -- ufix1
          Rx1_Data_I_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx1_Data_Q_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx2_Data_I_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          Rx2_Data_Q_Out                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          AXI4S_Data_Out                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4S_Valid_Out                 :   OUT   std_logic;  -- ufix1
          AXI4S_Tready_Out                :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : HDL_Chirp_ip_reset_sync
    USE ENTITY work.HDL_Chirp_ip_reset_sync(rtl);

  FOR ALL : HDL_Chirp_ip_axi_lite
    USE ENTITY work.HDL_Chirp_ip_axi_lite(rtl);

  FOR ALL : HDL_Chirp_ip_axi4_stream_write_master
    USE ENTITY work.HDL_Chirp_ip_axi4_stream_write_master(rtl);

  FOR ALL : HDL_Chirp_ip_axi4_stream_read_slave
    USE ENTITY work.HDL_Chirp_ip_axi4_stream_read_slave(rtl);

  FOR ALL : HDL_Chirp_ip_dut
    USE ENTITY work.HDL_Chirp_ip_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_packet_size_axi4_stream_write_master : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_maxTxCount                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_txStart                    : std_logic;  -- ufix1
  SIGNAL write_txSel                      : std_logic;  -- ufix1
  SIGNAL dma_tx0I_in_unsigned             : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Tx1_Data_I_In_sig                : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dma_tx0Q_in_unsigned             : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Tx1_Data_Q_In_sig                : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL baseband_rx0I_in_unsigned        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx1_Data_I_In_sig                : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL baseband_rx0Q_in_unsigned        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx1_Data_Q_In_sig                : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL baseband_rx1I_in_unsigned        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx2_Data_I_In_sig                : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL baseband_rx1Q_in_unsigned        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx2_Data_Q_In_sig                : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL AXI4S_Data_Out_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4S_Valid_Out_sig              : std_logic;  -- ufix1
  SIGNAL AXI4_Stream_Write_Master_TDATA_tmp : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_user_ready                   : std_logic;  -- ufix1
  SIGNAL AXI4S_Tready_Out_sig             : std_logic;  -- ufix1
  SIGNAL top_user_data                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL top_user_data_unsigned           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4S_Data_In_sig                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL Tx_Valid_Out_sig                 : std_logic;  -- ufix1
  SIGNAL Tx1_Data_I_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Tx1_Data_Q_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx_Valid_Out_sig                 : std_logic;  -- ufix1
  SIGNAL Rx1_Data_I_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx1_Data_Q_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx2_Data_I_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx2_Data_Q_Out_sig               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx1_Data_I_Out_sig_signed        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dma_rx0I_out_tmp                 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx1_Data_Q_Out_sig_signed        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dma_rx0Q_out_tmp                 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx2_Data_I_Out_sig_signed        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dma_rx1I_out_tmp                 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Rx2_Data_Q_Out_sig_signed        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dma_rx1Q_out_tmp                 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Tx1_Data_I_Out_sig_signed        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL baseband_tx0I_out_tmp            : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Tx1_Data_Q_Out_sig_signed        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL baseband_tx0Q_out_tmp            : unsigned(15 DOWNTO 0);  -- ufix16

BEGIN
  u_HDL_Chirp_ip_reset_sync_inst : HDL_Chirp_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_HDL_Chirp_ip_axi_lite_inst : HDL_Chirp_ip_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_packet_size_axi4_stream_write_master => write_packet_size_axi4_stream_write_master,  -- ufix32
              write_maxTxCount => write_maxTxCount,  -- sfix16
              write_txStart => write_txStart,  -- ufix1
              write_txSel => write_txSel,  -- ufix1
              reset_internal => reset_internal  -- ufix1
              );

  u_HDL_Chirp_ip_axi4_stream_write_master_inst : HDL_Chirp_ip_axi4_stream_write_master
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_Write_Master_TREADY => AXI4_Stream_Write_Master_TREADY,  -- ufix1
              user_data => AXI4S_Data_Out_sig,  -- ufix32
              user_valid => AXI4S_Valid_Out_sig,  -- ufix1
              write_packet_size_axi4_stream_write_master => write_packet_size_axi4_stream_write_master,  -- ufix32
              AXI4_Stream_Write_Master_TDATA => AXI4_Stream_Write_Master_TDATA_tmp,  -- ufix32
              AXI4_Stream_Write_Master_TVALID => AXI4_Stream_Write_Master_TVALID,  -- ufix1
              AXI4_Stream_Write_Master_TLAST => AXI4_Stream_Write_Master_TLAST,  -- ufix1
              user_ready => top_user_ready  -- ufix1
              );

  u_HDL_Chirp_ip_axi4_stream_read_slave_inst : HDL_Chirp_ip_axi4_stream_read_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_Read_Slave_TDATA => AXI4_Stream_Read_Slave_TDATA,  -- ufix32
              AXI4_Stream_Read_Slave_TVALID => AXI4_Stream_Read_Slave_TVALID,  -- ufix1
              user_ready => AXI4S_Tready_Out_sig,  -- ufix1
              AXI4_Stream_Read_Slave_TREADY => AXI4_Stream_Read_Slave_TREADY,  -- ufix1
              user_data => top_user_data,  -- ufix32
              user_valid => top_user_valid  -- ufix1
              );

  u_HDL_Chirp_ip_dut_inst : HDL_Chirp_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              Tx_Valid_In => dma_tx_valid_in,  -- ufix1
              Tx1_Data_I_In => std_logic_vector(Tx1_Data_I_In_sig),  -- sfix16
              Tx1_Data_Q_In => std_logic_vector(Tx1_Data_Q_In_sig),  -- sfix16
              AXI4S_Data_In => std_logic_vector(AXI4S_Data_In_sig),  -- sfix32
              AXI4S_Valid_In => top_user_valid,  -- ufix1
              AXI4S_Tready_In => top_user_ready,  -- ufix1
              maxTxCount => write_maxTxCount,  -- sfix16
              txStart => write_txStart,  -- ufix1
              txSel => write_txSel,  -- ufix1
              Rx_Valid_In => baseband_rx_valid_in,  -- ufix1
              Rx1_Data_I_In => std_logic_vector(Rx1_Data_I_In_sig),  -- sfix16
              Rx1_Data_Q_In => std_logic_vector(Rx1_Data_Q_In_sig),  -- sfix16
              Rx2_Data_I_In => std_logic_vector(Rx2_Data_I_In_sig),  -- sfix16
              Rx2_Data_Q_In => std_logic_vector(Rx2_Data_Q_In_sig),  -- sfix16
              ce_out => ce_out_sig,  -- ufix1
              Tx_Valid_Out => Tx_Valid_Out_sig,  -- ufix1
              Tx1_Data_I_Out => Tx1_Data_I_Out_sig,  -- sfix16
              Tx1_Data_Q_Out => Tx1_Data_Q_Out_sig,  -- sfix16
              Rx_Valid_Out => Rx_Valid_Out_sig,  -- ufix1
              Rx1_Data_I_Out => Rx1_Data_I_Out_sig,  -- sfix16
              Rx1_Data_Q_Out => Rx1_Data_Q_Out_sig,  -- sfix16
              Rx2_Data_I_Out => Rx2_Data_I_Out_sig,  -- sfix16
              Rx2_Data_Q_Out => Rx2_Data_Q_Out_sig,  -- sfix16
              AXI4S_Data_Out => AXI4S_Data_Out_sig,  -- ufix32
              AXI4S_Valid_Out => AXI4S_Valid_Out_sig,  -- ufix1
              AXI4S_Tready_Out => AXI4S_Tready_Out_sig  -- ufix1
              );

  ip_timestamp <= unsigned'(X"9514635A");

  reset_cm <=  NOT IPCORE_RESETN;

  reset_before_sync <= reset_cm OR reset_internal;

  dma_tx0I_in_unsigned <= unsigned(dma_tx0I_in);

  Tx1_Data_I_In_sig <= signed(dma_tx0I_in_unsigned);

  dma_tx0Q_in_unsigned <= unsigned(dma_tx0Q_in);

  Tx1_Data_Q_In_sig <= signed(dma_tx0Q_in_unsigned);

  const_1_1 <= '1';

  baseband_rx0I_in_unsigned <= unsigned(baseband_rx0I_in);

  Rx1_Data_I_In_sig <= signed(baseband_rx0I_in_unsigned);

  baseband_rx0Q_in_unsigned <= unsigned(baseband_rx0Q_in);

  Rx1_Data_Q_In_sig <= signed(baseband_rx0Q_in_unsigned);

  baseband_rx1I_in_unsigned <= unsigned(baseband_rx1I_in);

  Rx2_Data_I_In_sig <= signed(baseband_rx1I_in_unsigned);

  baseband_rx1Q_in_unsigned <= unsigned(baseband_rx1Q_in);

  Rx2_Data_Q_In_sig <= signed(baseband_rx1Q_in_unsigned);

  top_user_data_unsigned <= unsigned(top_user_data);

  AXI4S_Data_In_sig <= signed(top_user_data_unsigned);

  Rx1_Data_I_Out_sig_signed <= signed(Rx1_Data_I_Out_sig);

  dma_rx0I_out_tmp <= unsigned(Rx1_Data_I_Out_sig_signed);

  dma_rx0I_out <= std_logic_vector(dma_rx0I_out_tmp);

  Rx1_Data_Q_Out_sig_signed <= signed(Rx1_Data_Q_Out_sig);

  dma_rx0Q_out_tmp <= unsigned(Rx1_Data_Q_Out_sig_signed);

  dma_rx0Q_out <= std_logic_vector(dma_rx0Q_out_tmp);

  Rx2_Data_I_Out_sig_signed <= signed(Rx2_Data_I_Out_sig);

  dma_rx1I_out_tmp <= unsigned(Rx2_Data_I_Out_sig_signed);

  dma_rx1I_out <= std_logic_vector(dma_rx1I_out_tmp);

  Rx2_Data_Q_Out_sig_signed <= signed(Rx2_Data_Q_Out_sig);

  dma_rx1Q_out_tmp <= unsigned(Rx2_Data_Q_Out_sig_signed);

  dma_rx1Q_out <= std_logic_vector(dma_rx1Q_out_tmp);

  Tx1_Data_I_Out_sig_signed <= signed(Tx1_Data_I_Out_sig);

  baseband_tx0I_out_tmp <= unsigned(Tx1_Data_I_Out_sig_signed);

  baseband_tx0I_out <= std_logic_vector(baseband_tx0I_out_tmp);

  Tx1_Data_Q_Out_sig_signed <= signed(Tx1_Data_Q_Out_sig);

  baseband_tx0Q_out_tmp <= unsigned(Tx1_Data_Q_Out_sig_signed);

  baseband_tx0Q_out <= std_logic_vector(baseband_tx0Q_out_tmp);

  dma_rx_valid_out <= Rx_Valid_Out_sig;

  baseband_tx_valid_out <= Tx_Valid_Out_sig;

  AXI4_Stream_Write_Master_TDATA <= AXI4_Stream_Write_Master_TDATA_tmp;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

